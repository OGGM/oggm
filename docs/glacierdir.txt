.. currentmodule:: oggm

.. _glacierdir:

Glacier working directories
===========================

See also: :py:class:`~oggm.GlacierDirectory`

The majority of OGGM tasks are so-called "entity tasks". They
are standalone operations to be realized on one single glacier entity. These
tasks are executed sequentially: they often need input
generated by the previous task(s). In order to avoid complicated chains of
arguments, each task will read the input data from a glacier-specific
directory and writes its output into the same directory,
making the new data available for further computations.


Initalising a glacier directory
-------------------------------

.. ipython:: python
   :suppress:

    import os, shutil
    import numpy as np
    np.set_printoptions(threshold=10)
    import geopandas as gpd
    import oggm
    from oggm import cfg, tasks, graphics
    from oggm.utils import get_demo_file
    cfg.initialize()
    cfg.PARAMS['border'] = 20
    cfg.PATHS['dem_file'] = get_demo_file('hef_srtm.tif')
    path = os.path.join(os.path.expanduser('~'), 'OGGM_docs', 'GlacierDir')
    if os.path.exists(path):
        shutil.rmtree(path)

If no directory has been created yet, a GlacierDirectory requires an RGI entity
as input:

.. ipython:: python

    base_dir = os.path.join(os.path.expanduser('~'), 'OGGM_docs', 'GlacierDir')
    entity = gpd.GeoDataFrame.from_file(get_demo_file('Hintereisferner.shp')).iloc[0]
    gdir = oggm.GlacierDirectory(entity, base_dir=base_dir)
    gdir.dir
    gdir.rgi_id, gdir.rgi_area_km2

Note that this directory has just been created and is empty. The
:py:func:`tasks.define_glacier_region` will fill it with the first data files:

.. ipython:: python

    tasks.define_glacier_region(gdir, entity=entity)
    os.listdir(gdir.dir)

This persistence on disk allows for example to continue a workflow that has
been previously interrupted. Initialising a GlacierDirectory from a non-empty
folder won't erase its content (you'll have to set ``reset=True`` explicitely
if you want that):

.. ipython:: python

    gdir = oggm.GlacierDirectory(entity, base_dir=base_dir)
    os.listdir(gdir.dir)  # the directory still contains the data

You can also initialise a non-empty GlacierDirectory with its RGI ID, thus
sparing the reading of the shapefile every time:

.. ipython:: python

    gdir = oggm.GlacierDirectory('RGI40-11.00897', base_dir=base_dir)

Glacier divides
---------------

The glacier outlines provided by the RGI are the result of an automated
(sometimes manually corrected) delineation
procedure. In some cases, the RGI glacier is not the outline of a single
glacier (in the dynamical sense) but is the outline of a "glacier
complex".

.. ipython:: python

    cfg.set_divides_db()
    gdir = oggm.GlacierDirectory(entity, base_dir=base_dir, reset=True)
    tasks.define_glacier_region(gdir, entity=entity)
    tasks.glacier_masks(gdir)
    tasks.compute_centerlines(gdir)
    @savefig gdir_plot_cls_nodivide.png width=80%
    graphics.plot_centerlines(gdir)

Obviously, the oultines of HEF should be corrected to reflect the fact that
the glacier has now separated tributaries. OGGM does not (yet) implement a
method to divide these glacier complexes into individual glaciers [1]_,
but it does have a framework to deal with user provided glacier divides.
An RGI entity can have one or more "divides", stored as polygons in a
separate shapefile. Currently OGGM ships with a file containing the
divides for HEF:

.. ipython:: python

    cfg.set_divides_db(get_demo_file('divides_alps.shp'))
    gdir = oggm.GlacierDirectory(entity, base_dir=base_dir, reset=True)
    tasks.define_glacier_region(gdir, entity=entity)
    tasks.glacier_masks(gdir)
    tasks.compute_centerlines(gdir)
    @savefig gdir_plot_cls_withdivide.png width=80%
    graphics.plot_centerlines(gdir)

The divides are handled as sub-directories in the glacier directory: each
sub-directory stores the files specific to that divide. All the glaciers
have at least one divide ("divide_01"), the divide ID 0 being reserved for
the root directory which contains files concerning the entire RGI glacier.
The tasks that work on divides only can be recognized by their ``div_id=None``
keyword argument (they also implement the
:py:class:`~oggm.divide_task` decorator).


.. [1] Kienholz, C., Hock, R., & Arendt, A. a. (2013). A new semi-automatic approach for dividing glacier complexes into individual glaciers. Journal of Glaciology, 59(217), 925â€“937.

.. _basenames:

cfg.BASENAMES
-------------

This is a list of the files that can be found in the glacier directory or
its divides. These data files and their names are standardized and listed in the
:py:mod:`oggm.cfg` module. If you want to implement your own task you'll
have to add an entry to this file too.

